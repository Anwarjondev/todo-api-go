basePath: /
definitions:
  models.Todo:
    properties:
      completed:
        type: boolean
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.TodoModel:
    properties:
      title:
        type: string
    type: object
  models.UpdateTodoModel:
    properties:
      completed:
        type: boolean
      title:
        type: string
    type: object
  models.UserModel:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: This is a simple API for managing todo lists with authentication.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Todo List API with Authentication
  version: "1.0"
paths:
  /admin/getallusers:
    get:
      consumes:
      - application/json
      description: Admin can get all users
      produces:
      - application/json
      responses:
        "200":
          description: Get Users
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden (Admins only)
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all users (Admin Only)
      tags:
      - Admin
  /admin/todos:
    delete:
      consumes:
      - application/json
      description: Admin can delete any todo
      parameters:
      - description: Todo ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Todo deleted
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden (Admins only)
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete Any Todo (Admin Only)
      tags:
      - Admin
  /login:
    post:
      consumes:
      - application/json
      description: Login user and receive JWT token
      parameters:
      - description: User Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: User Login
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: 'Register a new user (default role: user)'
      parameters:
      - description: User Registration Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Register User
      tags:
      - Authentication
  /todos:
    get:
      consumes:
      - application/json
      description: Retrieve todos based on user role
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Todos
      tags:
      - Todos
  /todos/create:
    post:
      consumes:
      - application/json
      description: Create a new todo (only authenticated users)
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.TodoModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TodoModel'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create Todo
      tags:
      - Todos
  /todos/delete:
    delete:
      consumes:
      - application/json
      description: Delete a todo (users can delete only their own todos, admins can
        delete any)
      parameters:
      - description: Todo ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Todo deleted
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete Todo
      tags:
      - Todos
  /todos/update:
    put:
      consumes:
      - application/json
      description: Update a todo (users can update only their own todos)
      parameters:
      - description: Updated todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTodoModel'
      - description: Todo ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateTodoModel'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update Todo
      tags:
      - Todos
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
